{"hash":"d36ae33c8f4d9a29213c91ba61f8f93896c1d0f3","data":{"tag":{"id":"technical","title":"technical","path":"/tag/technical/","belongsTo":{"totalCount":1,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"afad9150b03da0a30d1661e07e309215","title":"Wyciskamy dane z PDF jak sok z cytryny.","datetime":"2020-04-06 10:18:38","path":"/wyciskamy-dane-z-pdf-jak-sok-z-cytryny/","content":"<p>Dane są wszystkim co jest lub może być przetwarzane umysłowo lub komputerowo. Przy obróbce komputerowej niektóre formy ich zapisu są mniej lub bardziej wygodne. Na przykład PDF uznawany jest za formę wygodną dla człowieka, ale często nie doceniamy możliwości maszyn w automatyzacji procesów opartych o pliki PDF.</p>\n<p>W tym wpisie pokarzemy jak pisząc naprawdę znikome ilości kodu można wygodnie wydobyć dane z plików PDF. Dla przykładu posłużymy się biletami kolejowymi ponieważ nie zawierają żadnych danych objętych tajemnicą, ale równie dobrze mogły to by być faktury, umowy czy pliki CV.</p>\n<p>[TOC]</p>\n<p><img src=\"/images/posts/2020-04-06/convert-scanned-pdf-to-text.jpg\"></p>\n<h2 id=\"zdobycie-danych\"><a href=\"#zdobycie-danych\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Zdobycie danych</h2>\n<p>Przy każdym zakupie biletu z adresu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bilet.eic@intercity.pl</code> wysyłany jest do mnie e-mail zawierający bilet. Łatwo mogę wyszukać te e-maile wybierając filtr w poczcie z której korzystam</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">bilet pkp has:attachment -in:chats from:bilet.eic@intercity.pl to:me </code>\n<p>Oto widok jaki widzę po filtrowaniu:</p>\n<p><img src=\"/images/posts/2020-04-06/gmail.png\"></p>\n<p>Teraz wystarczyło pobrać pliki aby móc poddać je obróbce.</p>\n<p>Wszystkie załączniki zapisałem na dysku twardym w katalogu ocr. Tak jak w każdym z wpisów na tym blogu dalsze operacje będą wykonywane na systemie Ubuntu.</p>\n<h2 id=\"przetworzenie-pdf-do-postaci-tekstu\"><a href=\"#przetworzenie-pdf-do-postaci-tekstu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Przetworzenie PDF do postaci tekstu</h2>\n<p>Zaczniemy od ustalenia początkowej zawartości katalogu. Jest wypełniony pikamy PDF.</p>\n<p><img src=\"/images/posts/2020-04-06/text.png\"></p>\n<p>Dzięki narzędziu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdftotext</code> z pakietu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">poppler-utils</code> możemy wydobyć z plików PDF interesujące nas informacje w postaci czystego tekstu. Następującym poleceniem możemy zainstalować to narzędzie:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt-get install poppler-utils</span></code></pre>\n<p>Aby go użyć korzystamy ze składni</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">pdftotext {PDF-file} {text-file}</code>\n<p>W naszym przypadku mamy wiele plików wejściowych i wyjściowych dlatego skorzystamy z <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.pdf </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i pdftotext </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #D32F2F\">;</span></code></pre>\n<p>Polecenie to składa się z dwóch części. W pierwszej listuję wszystkie pliki zaczynające się od <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">eic</code> i kończące się na <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.pdf</code>. Następnie używając programu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code> wynik przechwytywany jako strumień danych przekazuję linia po linii do polecenia <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdftotext</code>. Brak drugiego argumentu oznacza, że w moim przypadku powstały pliki tekstowe o takich samych nazwach jak pliki <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdf</code>.</p>\n<p>Łatwo sprawdzimy czy faktycznie istnieją dzięki poleceniu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ls</code></p>\n<p><img src=\"/images/posts/2020-04-06/text2.png\"></p>\n<h2 id=\"strukturyzacja-danych\"><a href=\"#strukturyzacja-danych\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strukturyzacja danych</h2>\n<p>Na początek zaczniemy od czegoś prostego. Załóżmy, że chcemy policzyć ile pieniędzy łącznie wydałem na bilety, ale nie będziemy sprawdzali tego na każdym bilecie po kolei ręcznie - od tego jest komputer. Poza tym gdy dostaniemy inny zestaw biletów ręczną robotę musieli byśmy powtarzać. Może Cię to zaskoczyć, ale aby wykonać to zadanie nie trzeba nawet edytora kodu i napisaliśmy to w jednej linii:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> paste -sd+ </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> bc</span></code></pre>\n<p>Ta linia zwróciła <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">786.11</code> czyli koszt wszystkich biletów.</p>\n<p><img src=\"/images/posts/2020-04-06/sum.png\"></p>\n<p>Wejdziemy teraz głębiej i zobaczmy co się za tym kryje. Wyświetlimy jeden z plików tekstowych poleceniem <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">cat eic_67584344.txt</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">BILET INTERNETOWYTANIOMIASTOWY</span>\n\n<span style=\"color: #22863A\">\"PKP Intercity\"</span>\n<span style=\"color: #24292EFF\">Spółka Akcyjna</span>\n\n<span style=\"color: #24292EFF\">OF: 503</span>\n\n<span style=\"color: #24292EFF\">NORMAL. </span><span style=\"color: #1976D2\">:</span><span style=\"color: #24292EFF\"> 1</span>\n<span style=\"color: #24292EFF\">ULG. </span><span style=\"color: #1976D2\">:</span>\n<span style=\"color: #24292EFF\">X </span><span style=\"color: #1976D2\">:</span><span style=\"color: #24292EFF\"> X</span>\n\n<span style=\"color: #24292EFF\">Przewoźnik: PKP IC</span>\n<span style=\"color: #24292EFF\">A-Cena bazowa: 1xNormal</span>\n\n<span style=\"color: #24292EFF\">¦ ¸</span>\n\n<span style=\"color: #24292EFF\">Od/From</span>\n\n<span style=\"color: #24292EFF\">27.09 05:50 Iława Gł.</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #24292EFF\">PRZEZ: Działdowo </span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\"> Nasielsk</span>\n\n<span style=\"color: #24292EFF\">Do/To</span>\n\n<span style=\"color: #24292EFF\">¦ ¸</span>\n\n<span style=\"color: #24292EFF\">KL./CL.</span>\n\n<span style=\"color: #24292EFF\">Warszawa C.</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">27.09 07:50</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">2</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">SUMA PLN: 39,90 zł</span>\n<span style=\"color: #24292EFF\">519836278964</span>\n\n<span style=\"color: #24292EFF\">Nr transakcji:</span>\n\n<span style=\"color: #24292EFF\">Informacje o podróży:</span>\n<span style=\"color: #24292EFF\">Stacja</span>\n<span style=\"color: #24292EFF\">Data Godzina</span>\n<span style=\"color: #24292EFF\">Iława Gł.</span>\n<span style=\"color: #24292EFF\">27.09 05:50</span>\n<span style=\"color: #24292EFF\">Warszawa C.</span>\n<span style=\"color: #24292EFF\">27.09 07:50</span>\n\n<span style=\"color: #24292EFF\">/Wagon K m</span>\n<span style=\"color: #24292EFF\">IC 5324</span>\n<span style=\"color: #24292EFF\">208</span>\n<span style=\"color: #24292EFF\">5</span>\n\n<span style=\"color: #24292EFF\">eIC67584344</span>\n\n<span style=\"color: #24292EFF\">Nr miejsca (o-okno ś-środek k-korytarz) Suma PLN</span>\n<span style=\"color: #24292EFF\">81 o</span>\n<span style=\"color: #24292EFF\">39,90 zł</span>\n<span style=\"color: #24292EFF\">1 m. </span><span style=\"color: #D32F2F\">do</span><span style=\"color: #24292EFF\"> siedzenia</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> wagon bez przedziałów</span>\n\n<span style=\"color: #24292EFF\">d9U</span>\n<span style=\"color: #24292EFF\">Podróżny:</span>\n<span style=\"color: #24292EFF\">PTU</span>\n<span style=\"color: #24292EFF\">8%</span>\n\n<span style=\"color: #24292EFF\">Suma PLN Płatność: przelewem</span>\n<span style=\"color: #24292EFF\">39,90 Zapłacono i wystawiono dnia:</span>\n<span style=\"color: #24292EFF\">2018-09-26 09:01:20(52245592)</span>\n\n<span style=\"color: #24292EFF\">Ogółem PLN:</span>\n\n<span style=\"color: #24292EFF\">39,90</span>\n\n<span style=\"color: #24292EFF\">Niniejszy bilet internetowy nie jest fakturą VAT.</span>\n<span style=\"color: #24292EFF\">W związku z przeprowadzanymi modernizacjami sieci kolejowej, uprzejmie prosimy o</span>\n<span style=\"color: #24292EFF\">dokładne sprawdzanie rozkładu jazdy pociągów przed podróżą.</span>\n\n<span style=\"color: #24292EFF\">Data wydruku: 2018-09-26 09:01:57</span>\n\n<span style=\"color: #24292EFF\">5324</span>\n\n<span style=\"color: #24292EFF\">Bilet internetowy jest biletem imiennym i jest ważny:</span>\n<span style=\"color: #24292EFF\">a) wraz z dokumentem ze zdjęciem potwierdzającym tożsamość Podróżnego,</span>\n<span style=\"color: #24292EFF\">b) tylko w dniu, relacji, pociągu, wagonie i na miejsce na nim oznaczone.</span>\n\n<span style=\"color: #24292EFF\">Zwrotu należności za niewykorzystany bilet dokonuje się na podstawie wniosku</span>\n<span style=\"color: #24292EFF\">złożonego przez płatnika w wyznaczonych przez </span><span style=\"color: #22863A\">'PKP Intercity'</span><span style=\"color: #24292EFF\"> S.A. punktach, z</span>\n<span style=\"color: #24292EFF\">wyjątkiem należności zwracanych automatycznie na zasadach określonych w</span>\n<span style=\"color: #24292EFF\">Regulaminie e-IC.</span>\n\n<span style=\"color: #24292EFF\">Daniel Gustaw</span>\n\n<span style=\"color: #24292EFF\">d9U</span>\n\n<span style=\"color: #24292EFF\">Informacja o cenie</span>\n<span style=\"color: #24292EFF\">Opłata za przejazd:</span>\n\n<span style=\"color: #24292EFF\">(P24) 7219</span></code></pre>\n<p>Pierwsze co się nasuwa to, że plik zawiera wszystkie informacje w formie nienaruszonej. Nie ma żadnych literówek, błędów, przestawień jakie typowe są dla systemów OCR wykonujących analogiczną pracę na skanach dokumentów. Cena <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">39,90 zł</code> powtarza się tu w kilku liniach. Czasami występuje razem z <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">zł</code>, czasami nie, może się zdarzyć, że układ linii będzie inny jeśli na bilecie będzie jechało kilka osób. Szukamy najbardziej wiarygodnego wzorca. Jest nim <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SUMA PLN: 39,90 zł</code>. Teraz chcemy wyłowić z tego pliku właśnie <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">39,90</code>. Posłuży nam do tego <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">perl</code> - język stworzony przez lingwistę Larrego Walla właśnie w celu pracy z plikami tekstowymi.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ cat eic_67584344.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span>\n<span style=\"color: #24292EFF\">39,90</span></code></pre>\n<p>Polecenie to można wytłumaczyć następująco: </p>\n<ul>\n<li>weź plik <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">eic_67584344.txt</code></li>\n<li>całą jego zawartość przekieruj do programu który napisaliśmy w <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">perl</code> jako wejście</li>\n<li>program na każdej linii tekstu wykonuje to samo polecenie</li>\n<li>sprawdza czy tekst pasuje do wzorca zaczynającego się od <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SUMA PLN:</code> i kończącego na <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">zł</code>. </li>\n<li>jeśli tak, to wycina wartość między tymi ciągami znakowymi i ją zwraca</li>\n</ul>\n<p>Problem jaki mamy to polski <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">,</code> zamiast ogólnie stosowanej na świecie <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.</code>. Ten problem bardzo łatwo eliminujemy poleceniem <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">tr</code> które zamienia swój pierwszy argument na drugi.</p>\n<p><img src=\"/images/posts/2020-04-06/tr.png\"></p>\n<p>Nie będziemy oczywiście powtarzać tych poleceń dla każdego pliku osobno. Zamiast tego ponownie wykorzystamy znany już <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code> </p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span>\n<span style=\"color: #24292EFF\">39.90</span>\n<span style=\"color: #24292EFF\">63.00</span>\n<span style=\"color: #24292EFF\">15.14</span>\n<span style=\"color: #24292EFF\">55.00</span>\n<span style=\"color: #24292EFF\">60.00</span>\n<span style=\"color: #24292EFF\">186.00</span>\n<span style=\"color: #24292EFF\">70.56</span>\n<span style=\"color: #24292EFF\">89.40</span>\n<span style=\"color: #24292EFF\">139.00</span>\n<span style=\"color: #24292EFF\">68.11</span></code></pre>\n<p>Pozwolił nam na przeszukanie plików tekstowych za pomocą zdefiniowanych filtrów plik po pliku. Z ciekawszych rzeczy to wykorzystane <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">&quot;{}&quot;</code> oznacza argument który wszedł do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code>.</p>\n<p>Zostało już tylko sumowanie, ale suma kolumn z pliku tekstowego to bułka z masłem w konsoli <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bash</code>. W przypadku jednej kolumny nie trzeba nawet uruchamiać <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">awk</code> - zaawansowanego programu do przetwarzania tekstów. Wystarczy nam <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">paste</code> - program do łączenia plików i <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bc</code> prosty program do liczenia sum.</p>\n<p>Za pomocą <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">paste</code> z opcją <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">-s</code> wykonamy transpozycję do jednej linii. Opcją <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">d</code> ustawimy separator. Będzie nim oczywiście znak dodawania <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">+</code>. Wynik wygląda miej więcej tak:</p>\n<p><img src=\"/images/posts/2020-04-06/paste.png\"></p>\n<p>Ostatnia cegiełka <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bc</code> kończy zadanie, ale to było prezentowane na samym początku:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> paste -sd+ </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> bc</span>\n<span style=\"color: #24292EFF\">786.11</span></code></pre>\n<h2 id=\"wizualizacja-wyników\"><a href=\"#wizualizacja-wynik%C3%B3w\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wizualizacja wyników</h2>\n<p>Ponieważ pliki ułożone są chronologicznie wyświetlimy łatwo będzie nam zobaczyć wykres kolejnych cen. W tym celu pobieramy <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">chart</code> - paczkę napisaną w <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">go</code> służącą do tworzenia wykresów.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">wget https://github.com/marianogappa/chart/releases/download/v3.0.0/chart_3.0.0_linux_amd64.tar.gz -O /tmp/chart.tar.gz</span></code></pre>\n<p>I rozpakowujemy </p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">tar -xvf /tmp/chart.tar.gz --directory /usr/local/bin</code>\n<p>Kolejna komenda, dodaje numery kolumn <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">cat -n</code> i rysuje wykres</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">ls eic_*.txt | xargs -i cat &quot;{}&quot; | perl -ne &#039;if(/SUMA PLN: (.*) zł/){print &quot;$1\\n&quot;;}&#039; | tr , . | cat -n | chart line</code>\n<p><img src=\"/images/posts/2020-04-06/graph.png\"></p>\n<p>Podsumowując. Nie napracowaliśmy się tutaj za bardzo ale właśnie to było celem. Pokazanie jak jedną linią kodu można posumować ceny lub wyrysować wykres z danych, które pozornie są niedostępne, bo ich format nie jest tak oczywisty jak w przypadku uporządkowanych danych zapisanych w bazie o dobrze określonej strukturze.</p>\n<p>Jeśli jesteś przedsiębiorcą i zainteresował Cię temat automatyzacji przetwarzania dokumentów umów się ze mną na darmową konsultację korzystając z linku ...</p>\n<p>Jeśli jesteś programistą i chcesz z nami pracować ...</p>\n<p>Jeśli chcesz poszerzyć swoją wiedzę i zapoznać się z narzędziami z których korzystaliśmy linki do nich znajdziesz poniżej...</p>\n<p>Czyszczenie danych</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Data_cleansing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Data_cleansing</a></p>\n<p>Pdf to Text Converter</p>\n<p><a href=\"https://www.cyberciti.biz/faq/converter-pdf-files-to-text-format-command/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.cyberciti.biz/faq/converter-pdf-files-to-text-format-command/</a></p>\n<p>Przykład zastosowania xargs</p>\n<p><a href=\"https://stackoverflow.com/questions/33141207/what-is-the-working-of-this-command-ls-xargs-i-t-cp-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/33141207/what-is-the-working-of-this-command-ls-xargs-i-t-cp-1</a></p>\n<p>Chart - narzędzie do rysowania wykresów</p>\n<p><a href=\"https://marianogappa.github.io/chart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marianogappa.github.io/chart/</a></p>\n<p>Paste - komenda do łączenia plików</p>\n<p><a href=\"https://www.geeksforgeeks.org/paste-command-in-linux-with-examples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/paste-command-in-linux-with-examples/</a></p>\n<p>Przykładowe onelinery w Perlu</p>\n<p><a href=\"https://www.rexegg.com/regex-perl-one-liners.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.rexegg.com/regex-perl-one-liners.html</a></p>\n","excerpt":"","description":"","timeToRead":6,"author":{"id":"Daniel Gustaw","title":"Daniel Gustaw","path":"/author/Daniel%20Gustaw/"}}}]}}},"context":{}}