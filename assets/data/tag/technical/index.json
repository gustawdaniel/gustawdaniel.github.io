{"hash":"29051e5f392aad1c74a491ba61f8f93896c1d0f3","data":{"tag":{"id":"technical","title":"technical","path":"/tag/technical/","belongsTo":{"totalCount":2,"pageInfo":{"totalPages":1,"currentPage":1},"edges":[{"node":{"id":"3d63178c12f02c09ffed05ac5f634abe","title":"W jaki sposób wojna o kompatybilność ukształtowała frontend?","datetime":"2020-05-04 19:23:56","path":"/w-jaki-sposob-wojna-o-kompatybilnosc-uksztaltowala-frontend/","content":"<p>Problem niekompatybilnych wersji oprogramowania czy sprzętu prawdopodobnie nie raz przeszkadzał nam w codziennym życiu. Być może spotkałeś się z sytuacjami lub zauważyłeś:</p>\n<ul>\n<li>jak pytając kogoś o ładowarkę do telefonu 10 lat temu trzeba było ustalać czy na pewno pasuje</li>\n<li>jak BIOS był wypierany przez UEFI bo nie wspierał startu systemów z dysków powyżej 2TB</li>\n<li>jaką stare gry z młodości sprawiały problemy na nowych systemach operacyjnych</li>\n<li>jak dwa portfele BTC potrafią dla tego samego seeda wyświetlać różne wartości stanu konta</li>\n</ul>\n<p>Być może jako przedsiębiorca mierzyłeś się już z problemem migrowania swojego systemu informatycznego, albo jako programista walczyłeś z błędami powodowanymi aktualizacją jakiejś paczki.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 500 338' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-bfcb35f6a5b7932f1020679135aae64d'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-bfcb35f6a5b7932f1020679135aae64d)' width='500' height='338' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAArAEADASIAAhEBAxEB/8QAGQABAQEBAQEAAAAAAAAAAAAABgcFBAIB/8QAMRAAAgEDBAAFAwIFBQAAAAAAAQIDBAURAAYSIRMxQVFhByJxMkIUFRaRomJzgcHw/8QAGgEAAgIDAAAAAAAAAAAAAAAAAQIDBgAEBf/EACQRAAICAQMCBwAAAAAAAAAAAAECABEDBBIhMWEiIzJBUWKh/9oADAMBAAIRAxEAPwB/9ThbIpIWjjiNcpBDKByUfJ0XZ1SKmlmjmcvxDcZAATnPX3DWfYqCS/SSFpSFXHJmbJY63aLb38ykeNJXUQHBKnOD7aqeTVvjyeEXfzJRiZjxOqgulXQwQU8NQ0AwQ37%2bZ%2bMfP/hriprtUwVcjUb1UU0jluQOQ5/GfL%2b2vtJt%2btnujRipV0hIKllB79OvLW1PtS60kSzZ8bGD3gkHvsdfJ1Np9cpTzB0%2btwnCwF1B103rVQXpo2gv9TMQFVoc%2bES2SoyXC5OMA/BHeklnulTuLb5q7bWSmNZPCaPnwlhK9OkgJ6I7x/356m296u4W29VlNUO/8HAI5oftHLmFz0R85/sNBdtbgvtmvUtfa5J2aUFp4QhdJVPuPcHPfzqwIodAUH5E2cXK/tUW6TcQip6OZKxG5NNI3IlcdgnkSfT00Q3XAHve63x%2bkAf46U7AvtNcbrFO8C0sjjDKQAST6nWFuEBn3fL/AKyP8RoBju5mVLNsHZSU1RVzzyN4DthYx0CPc6cR2KgooJUo6eOEPktxHmffXiatS3WwykYKr5azZ73PHZ3qnwzkfaoHv5aqLa3GrBWFtUnUkG4St1723t271KXa8wRujkBMliPzgaSVu8bbcLQ89pnMtN2DNxIHXnjOsW%2b7MpLxakqq%2bnQVbgN4yKFYE%2b/uPzog1wh2dRpQ18LtF45hUxpyBBGeWPbXV0WDEyAoDfeHM1%2b8wN5bstaScZYWqqlmKJBGvJmwPP4Hfro/cb8iUyJBTx06vHyKoO8EdDPv3pDeNo2efclsuE8/hQyu0ipEOPjKy54nPl2AdDvqNW061gCeFFEowkae3oNdtQNoAmuPV2hyO51VLdFqgOaxsCAf0/jTKvqVqdsbgrFGBP8Afj2yo1K6i5Gef349dk6aUt1So2JcaQODUcOl9xpih4jmYGyr5ui%2bXOOgpr3WQwIvKaWSUvxQfB9fjVnsdbWtRq8lXUtSA4jZ2LSSkfu9AB/xqM/S4BLbfJF6kwicvXGD1qvLK8VtmVGwI6Q8fj7QNJqcSbqCiYlkTRrPrBMjmjiSSqhjwrNIwXv4wMnXv%2btbNdIw93peHgMJQHAdcjyJ/GovSdQKw/UQDn5Ouip6jlUdKFXA/ONRLiVekdkFxh9SN226tejuFukqWuNOOHB0IRQQQWx5ZwT66m1XSXTclayW2nlk4DMjzMBxz39x8l/Hnrqk%2b6ahDdgjkc95PHOnv05RRtKnbA5Sqsjn1Zm7Yk/J1sK2wXAV4AkyGy7xThmlajA/3/M%2b3lrytuuNE2ZEQRkYOJR2NVa4RpJNh1Vhn1Gj14pICjExjPA%2bp065C3WIRU//2Q==' /%3e%3c/svg%3e\" width=\"500\" data-srcset=\"/assets/static/cat.b269a45.80041d0153ff35a31d847fc5a2b33e00.jpg 500w\" data-sizes=\"(max-width: 500px) 100vw, 500px\" data-src=\"/assets/static/cat.b269a45.80041d0153ff35a31d847fc5a2b33e00.jpg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/cat.b269a45.80041d0153ff35a31d847fc5a2b33e00.jpg\" width=\"500\"></noscript></p>\n<p>Ten artykuł jest początkiem krótkiej serii wpisów dotyczących kompatybilności:</p>\n<p>Dowiesz się z nich:</p>\n<ul>\n<li>dowiesz się jak kompatybilność wsteczna wpływała na kierunek rozwoju technologii webowych</li>\n<li>poznasz sposoby zachowywania kompatybilności w swoich projektach</li>\n<li>zobaczysz jak rozszerzyłem funkcjonalność w projekcie open source bez zmiany starych interfejsów </li>\n</ul>\n<p>Na dzisiaj mamy wstęp historyczny. Znajomość mechanizmów, które opiszę pomoże Ci łatwiej prognozować trendy w technologiach i optymalizować decyzje dotyczące tego w jaką technologię inwestować.</p>\n<h2 id=\"wojna-o-kompatybilność-ukształtowała-dzisiejszy-web\"><a href=\"#wojna-o-kompatybilno%C5%9B%C4%87-ukszta%C5%82towa%C5%82a-dzisiejszy-web\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wojna o kompatybilność ukształtowała dzisiejszy web.</h2>\n<p>Kwestia kompatybilności, to nie tylko problemy zwykłych ludzi, a sprawa wpływająca znacznie na kierunku rozwoju cywilizacji. To dzięki niej, lub przez jej brak pewne technologie mogą rosnąć, a inne są zapominane.</p>\n<p>Za przykład niech posłuży nam historia rozwoju frontendu webowego, którą w bardzo skróconej wersji przybliżę. Był początek millenium. Twórcy przeglądarek toczyli krwawą walkę o klientów, których próbowali przyciągnąć coraz to nowszymi funkcjonalnościami. Pracowali nad nimi niezależnie i kiedy je publikowali programiści uczyli się wprowadzonych przez przeglądarki specyfikacji i coraz bardziej załamywali ręce. </p>\n<p>Często dla każdej przeglądarki trzeba było pisać osobny kod do wykonania tego samego zadania. Niektóre zmieniały interfejs programistyczny nawet z wersji na wersję kilka razy! Pisząc kod programista zamiast zapytać o szerokość okna, sprawdzał na początku o to z jaką przeglądarką ma do czynienia, później dopiero w długiej liście warunków wykonywał odpowiednie komendy stosownie do przeglądarki jaką wykrył</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1920 1080' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-961dcc564bd2b0f51460bda8b7f82c08'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-961dcc564bd2b0f51460bda8b7f82c08)' width='1920' height='1080' xlink:href='data:image/jpeg%3bbase64%2c/9j/2wBDAAYEBQYFBAYGBQYHBwYIChAKCgkJChQODwwQFxQYGBcUFhYaHSUfGhsjHBYWICwgIyYnKSopGR8tMC0oMCUoKSj/2wBDAQcHBwoIChMKChMoGhYaKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCj/wAARCAAkAEADASIAAhEBAxEB/8QAGwAAAwADAQEAAAAAAAAAAAAAAAQFAQIGAwf/xAAwEAACAQQBAwMBBQkAAAAAAAABAgMABBEhEhMiMQVBUXFCYYGRoQYUMlJygrGywv/EABgBAAMBAQAAAAAAAAAAAAAAAAECAwQA/8QAGxEAAwEBAQEBAAAAAAAAAAAAAAECIRExQVH/2gAMAwEAAhEDEQA/APhXp8lqiRP14RN2jpJadRs/VteapqGhdow92kQVppYprhLcOfs8QM78jFctCO6uj9JjNxdg/uziE8Qwt4ebD4xn3Nbo0yVgu90nT5QWdoZQSOTI0rPneSTrI%2blSrxLqXukRUVhx8BBjOfFWbsSFs3BbHMoA8gTiRnyB4%2bKQYKshkjWMlfHGEyf7arqk6WIL6ajZDXkJbBwsKtMSfjtGKWvoYbaXpqbgnG%2bogjOfbW9Vd53LRqLqWRFY9QdS6W3TjjXau80sJLUygRm3Usd9CBp21vy53U3KHVMkwzJxwlsjsdciS36U1HFcSoOxVRtZOFGj9/xTd1O8pDSvK0Y/hWWRItj3CrWyXcMajpraIeQbthMjD%2b5vrRUr6wN/iFIfIq/6cGfhznjWLGSsjkKwBxggfX8q5uF/FWLIGSCR1BPDbfAHzTQzqRUvowLmRoggdiDGIYCiEN8ct40cVOu1GT1D2D7M0/8AytUL2OdxHJdXKSyOugZebADwD8edUpcWMaSsjicsPYJw9s75VR6S8Isjxx5ZXVXOx04s4P1NeIu4BkLavMwPIdSQ4B9zxWqhjgi7WhtmZmBzI7OVH9K%2ba3uLtI45ChnC4xi3gS3QH8ck1JplU0IO1/LEeNglvDIcdsAQbP8AMd4/GsRWYEgWe6giz54nqEfgtZvJYbmR2kl6RjTXUladpGx8%2bBv8s15JeqloVR51nzxBTii8fvxsmhndDvMFYiadtnYaB1RRSyMzpPTpJX9OlAlZFi71CADYIxvGf1pn9rIEtfV5Y0DPgKS0jFyTjeSaKK0Lwzv0gXFzNxbg/TB8hAF/xUmbLHLEk/eaKKjbKwh0%2bnQrZvMS7MoJAJ1qkGkNvMyxBdHRKgkUUUHnOBW96f/Z' /%3e%3c/svg%3e\" width=\"1920\" data-srcset=\"/assets/static/width.82a2fbd.0cb870e9b786f4391314c2ae43f20de9.jpeg 480w, /assets/static/width.cbab2cf.0cb870e9b786f4391314c2ae43f20de9.jpeg 1024w, /assets/static/width.2665e34.0cb870e9b786f4391314c2ae43f20de9.jpeg 1920w\" data-sizes=\"(max-width: 1920px) 100vw, 1920px\" data-src=\"/assets/static/width.2665e34.0cb870e9b786f4391314c2ae43f20de9.jpeg\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/width.2665e34.0cb870e9b786f4391314c2ae43f20de9.jpeg\" width=\"1920\"></noscript></p>\n<p>W tych warunkach w 2005 pojawiła się biblioteka jQuery. Stanowiła ona warstwę pośredniczącą między programistami webowymi a przeglądarkami. Błyskawicznie zaczęła zdobywać popularność, bo choć obciążała przeglądarki, to dzięki niej programista pisał znacznie mnie kodu, a dodatkowo to ona przejmowała odpowiedzialność za obsługę starych przeglądarek. Wraz ze zdobywanie popularności wprowadzała nowatorskie rozwiązania jak niektóre selektory do wyszukiwania elementów na stronie, które dopiero później znalazły się na stałe w standardach. Do jQuery napisano niezliczoną liczbę wtyczek i w 2012 stała się technologią, którą poznawał każdy programista jeśli chciał pisać strony internetowe.</p>\n<p>Wszyscy wiedzieli, że kod bez jQuery działa często znacznie szybciej, ale ogromny sukces jQuery pokazuje jak wielka nagroda czeka tego kto rozwiąże problem kompatybilności, który pojawia się zawsze w momencie dynamicznego budowania nowoczesnych technologii.</p>\n<p>Popularność jQuery zaczęła przygasać dopiero kiedy stało się jasne, że twórcy przeglądarek dogadali się i uporządkowali proces wdrażania rekomendacji organizacji standaryzujących jak W3C. Ta organizacja powstała z kooperacji MIT i CERN przy poparciu DARPA i Komisji Europejskiej dba o to, żeby technologie webowe były kompatybilne i tworzy dokumentację dla twórców języków i przeglądarek. Budowa tego w przemyślany sposób pozwala obecnie na osiąganie znacznie trudniejszego celu - kompatybilności w przód. To znaczy, że standardy webowe projektowane są teraz tak, żeby ich późniejsze zmiany nie powodowały problemów w działaniu poprzednich wersji.</p>\n<p>Jednak to nie koniec historii. Być może interesuje was, co się stało z technologiami webowymi po tym, jak jQuery przestawało powoli być już potrzebne.</p>\n<p><img class=\"g-image g-image--lazy g-image--loading\" src=\"data:image/svg+xml,%3csvg fill='none' viewBox='0 0 1150 348' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink'%3e%3cdefs%3e%3cfilter id='__svg-blur-92f31f76a2792b41f5bd9d987f024d32'%3e%3cfeGaussianBlur in='SourceGraphic' stdDeviation='40'/%3e%3c/filter%3e%3c/defs%3e%3cimage x='0' y='0' filter='url(%23__svg-blur-92f31f76a2792b41f5bd9d987f024d32)' width='1150' height='348' xlink:href='data:image/png%3bbase64%2ciVBORw0KGgoAAAANSUhEUgAAAEAAAAATCAYAAAAgcwuHAAAACXBIWXMAAAsSAAALEgHS3X78AAAEuElEQVRYw81XWW8bNxDWf%2b5/6EMeAhQI%2blD0JxRFG/RI0ABNmzS2ocaHJFuStdIecqxzd3XszePrkLs6fCi%2b5NQLfCCXx5DD%2bWY4LIE%2b0zRRqVRQq9U0ms2m/m80GnAcB9VqFfV6fVk/Pj7W6Ha7iKII0%2bkUT/GTUuqy1%2bthMBiAMQbP83TZ6XTAOUdJDVIV1aiQZdkFqD6lZJqmur5oT5JEj1dtCkqOEOLJQe1L7VXtf6Grao/jeHUA12Fxgov6%2bv/l/qcMpezn9l%2b6C5W%2bxCekWq9Yd8uucF1b6TaneN0JbgvYsNa6%2buIRGVK66dRUqfxF%2bftj%2bCjnRFG5wqnLYHgUV6gvSDjijKsj0H2S2hjfXmzQDLgNbdYnbIeSF//HkcR%2bn%2bNXg6E25OjNBXbOuMafNkOF2uapBBNyOV9eKu/rGqXb%2bM5Wg5KWSdGYlEmYxDAUOOwzUlCg5fHlmo0xxzQRemz5nOHDGcPHHkN9zAv3KFDIE6LAXdxvEQMuR/zLg9S1p1zgoVcdX9JPoDJgOCCFdkixTLkBcoiC5qquKL/uHnGWz9ujOa/bGUYBXctM6HIxX0HN59euz3NwfvMBbPsGWJfS8QX6gbzSv76U3DBfecEglHDJbRquwNFAEDM4aiOBs5m8InfJCMjNLrBJ4UVdJREPYQAvLBoQzRtjhpMR0xa9D4M0K7BiSJjm9bbHsNvNcNRLUSWWOBN2JTYMwjHGgQvLs2lemDNAFKNetjL81Mx0nYuLTFiPnHdFLktilij68mLD8kFX28LfFy6SJzsrbWcpcDAAds%2bmOOx2cDrpouMZGLs2xZkmrImVj1YMWCj7bCfB1/8kuq6i7XX3/10jfSEaKZc4HCj/W9H43teHXGVK8rKrzAJ4rSqGgxZO7T2YtXcwyjt49fJHVPf20Tqw0S1XER5WaRNcz10ewDflBM/LrLD4VRfI3wVsA7gumYbKtSkoSRWYOMYhoyifYRIzvSgr3g63A8lW7w1Ff7K02rIOdyonoNxETnyQtmDtU0Qnh%2bj8%2bwc67QN4gQ8/mOWeoj5/jiyKEZM8exRiv/YJ/qdh7gKLA3hezvDs7USf6Zxxslp67yBIBscwolcmiWv728iPFS1J6JyEDlwIy0HcaiLo2rCNCtqDDsUAB146KywX0/gRZOJARgZkZgJJC4iadKW1IaI6wmiyfgAc3zbIDb76Hvj5Bb6rvMCb1tsiHnBdBvEUzc4u2tYeLPcY5tkRDLuMTv8Iju/AGR3jtHeC95aJN4aBj84Jan0L576BT74J222j67XheBaVJrq%2bdSMc6wh25W/YR3/B2v8dZuUXmKev0DFfwxp9wGHzN7zf%2bwGO8Y4UtIHQAJ/XwcM2eNyHSD2IbE6YEfm4ZrYKyEIZV2a5C2gliRpRyjDqjzByWhi6Z4iSWE9aPCfH7piUNzAc9zEJfXhTD%2b7EhTf3MImmmAZUzl0MZz7C2Kf02UVE5Sz0yHBq/BC9YRfdcxMjr0cHOqE%2bX/dtwmw2wtQ7x4ysNSdFpiSzT5YeDi0Efh%2bSLK6Q0TqpQhJQXkBGJraswHPoZ3xalEwH0Qt5wKb7d%2bkGX%2b5BeOu8Qt6x57N5wKbX2WO/Bv9PqO8/MQyZ1sJ7SyUAAAAASUVORK5CYII=' /%3e%3c/svg%3e\" width=\"1150\" data-srcset=\"/assets/static/trends.82a2fbd.1b4107b0c442da1dca5ffa311de16cf9.png 480w, /assets/static/trends.dac5b41.1b4107b0c442da1dca5ffa311de16cf9.png 1150w\" data-sizes=\"(max-width: 1150px) 100vw, 1150px\" data-src=\"/assets/static/trends.dac5b41.1b4107b0c442da1dca5ffa311de16cf9.png\"><noscript><img class=\"g-image g-image--lazy g-image--loaded\" src=\"/assets/static/trends.dac5b41.1b4107b0c442da1dca5ffa311de16cf9.png\" width=\"1150\"></noscript></p>\n<p>W 2013 roku zaczęło być głośno o frameworku Angular Js stworzonym 4 lata wcześniej przez Google. W tym samym momencie Facebook ogłosił powstanie Reacta. Oba narzędzia wdrażały deklaratywny paradygmat budowania interfejsów za pomocą bezstanowych komponentów. Krótko mówiąc, programista definiował warunki mówiące jak frontend ma działać, a komponenty przejmowały odpowiedzialność za warstwę wizualną pozostawiając więcej uwagi programisty do pracy nad logiką biznesową. W uproszczeniu: każde z sprawiało, że kod pisało się jeszcze szybciej niż w jQuery. </p>\n<p>Angular Js zaczął jako ten pierwszy i miał przewagę. Sam pamiętam jak przecierałem oczy ze zdziwienia oglądając jak mój przyjaciel pierwszy raz pokazał mi aplikację napisaną w Angularze Js w 2015 roku. Wszystko wskazywało wtedy, że warto uczyć się bardziej Angulara Js niż Reacta. </p>\n<p>W 2016 wydany został Angular 2.0, już bez Js. Początkowo miał być po prostu kolejną wersją Angular Js, ale decyzje projektowe sprawiły, że nie był on kompatybilny z pierwszą wersją Angulara Js. Od początku wzbudzało to duże kontrowersje. Podobnie jak fakt, że od tego momentu nowe wersje miały wychodzić co pół roku, a kompatybilność wsteczna miała być trzymana tylko dwie wersje wstecz.</p>\n<p>Frameworki webowe szybko rosły, było ich coraz więcej i rok 2017 stał się rokiem hasła \"Jakiego nowego frameworka nauczę się dzisiaj?\". W szkole programowania w której wykładałem zadawano sobie pytanie: \"Jakiego frameworka mamy uczyć naszych kursantów?\". Jej założyciel postawił na Reacta. Kompatybilność wsteczna była znaczącym czynnikiem tej decyzji. </p>\n<p>Łatwo domyślić się, że wielu twórców materiałów edukacyjnych chciało, żeby raz wytworzony kurs przynosił im korzyści dłużej. Wielu programistów chciało uczyć się narzędzia, które będzie działało w ten sam sposób za rok i przy którym aktualizacje nie będą podbijać kosztów utrzymania.</p>\n<p>W roku 2017 - czyli rok po nadużyciu przez Angulara zaufania budowanego przez kompatybilność wsteczną React wyprzedził Angulara i już nigdy nie wypuścił tej przewagi.</p>\n<p>Jaka lekcja płynie z tej historii? Że kompatybilność jest jednym z kluczowych czynników, które należy traktować poważnie analizując lub planując rozwój technologii.</p>\n<p>Źródła do dalszej lektury:</p>\n<p>Kompatybilność na przykładzie monitorów</p>\n<p><a href=\"https://www.eizo.pl/baza-wiedzy/od-displayport-po-d-sub-przeglad-zlaczy-wideo-w-monitorach-lcd/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.eizo.pl/baza-wiedzy/od-displayport-po-d-sub-przeglad-zlaczy-wideo-w-monitorach-lcd/</a></p>\n<p>Komisja Europejska chce zmusić Apple do porzucenia Lightning w iPhone'ach</p>\n<p><a href=\"https://www.spidersweb.pl/2018/08/iphone-ladowarka-lightning.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.spidersweb.pl/2018/08/iphone-ladowarka-lightning.html</a></p>\n<p>Problemy z BIOS i dyskami</p>\n<p><a href=\"http://itfocus.pl/dzial-it/storage/duze-dyski-duze-klopoty/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://itfocus.pl/dzial-it/storage/duze-dyski-duze-klopoty/</a></p>\n<p>Historia W3C</p>\n<p><a href=\"http://www.tlumaczenia-angielski.info/w3c/history.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">http://www.tlumaczenia-angielski.info/w3c/history.html</a></p>\n","excerpt":"","description":"","timeToRead":4,"author":{"id":"Daniel Gustaw","title":"Daniel Gustaw","path":"/author/Daniel%20Gustaw/"}}},{"node":{"id":"afad9150b03da0a30d1661e07e309215","title":"Wyciskamy dane z PDF jak sok z cytryny.","datetime":"2020-04-06 10:18:38","path":"/wyciskamy-dane-z-pdf-jak-sok-z-cytryny/","content":"<p>Dane są wszystkim co jest lub może być przetwarzane umysłowo lub komputerowo. Przy obróbce komputerowej niektóre formy ich zapisu są mniej lub bardziej wygodne. Na przykład PDF uznawany jest za formę wygodną dla człowieka, ale często nie doceniamy możliwości maszyn w automatyzacji procesów opartych o pliki PDF.</p>\n<p>W tym wpisie pokarzemy jak pisząc naprawdę znikome ilości kodu można wygodnie wydobyć dane z plików PDF. Dla przykładu posłużymy się biletami kolejowymi ponieważ nie zawierają żadnych danych objętych tajemnicą, ale równie dobrze mogły to by być faktury, umowy czy pliki CV.</p>\n<p><img src=\"/images/posts/2020-04-06/convert-scanned-pdf-to-text.jpg\"></p>\n<h2 id=\"zdobycie-danych\"><a href=\"#zdobycie-danych\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Zdobycie danych</h2>\n<p>Przy każdym zakupie biletu z adresu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bilet.eic@intercity.pl</code> wysyłany jest do mnie e-mail zawierający bilet. Łatwo mogę wyszukać te e-maile wybierając filtr w poczcie z której korzystam</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">bilet pkp has:attachment -in:chats from:bilet.eic@intercity.pl to:me </code>\n<p>Oto widok jaki widzę po filtrowaniu:</p>\n<p><img src=\"/images/posts/2020-04-06/gmail.png\"></p>\n<p>Teraz wystarczyło pobrać pliki aby móc poddać je obróbce.</p>\n<p>Wszystkie załączniki zapisałem na dysku twardym w katalogu ocr. Tak jak w każdym z wpisów na tym blogu dalsze operacje będą wykonywane na systemie Ubuntu.</p>\n<h2 id=\"przetworzenie-pdf-do-postaci-tekstu\"><a href=\"#przetworzenie-pdf-do-postaci-tekstu\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Przetworzenie PDF do postaci tekstu</h2>\n<p>Zaczniemy od ustalenia początkowej zawartości katalogu. Jest wypełniony pikamy PDF.</p>\n<p><img src=\"/images/posts/2020-04-06/text.png\"></p>\n<p>Dzięki narzędziu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdftotext</code> z pakietu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">poppler-utils</code> możemy wydobyć z plików PDF interesujące nas informacje w postaci czystego tekstu. Następującym poleceniem możemy zainstalować to narzędzie:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">sudo apt-get install poppler-utils</span></code></pre>\n<p>Aby go użyć korzystamy ze składni</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">pdftotext {PDF-file} {text-file}</code>\n<p>W naszym przypadku mamy wiele plików wejściowych i wyjściowych dlatego skorzystamy z <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code>.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.pdf </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i pdftotext </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #D32F2F\">;</span></code></pre>\n<p>Polecenie to składa się z dwóch części. W pierwszej listuję wszystkie pliki zaczynające się od <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">eic</code> i kończące się na <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.pdf</code>. Następnie używając programu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code> wynik przechwytywany jako strumień danych przekazuję linia po linii do polecenia <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdftotext</code>. Brak drugiego argumentu oznacza, że w moim przypadku powstały pliki tekstowe o takich samych nazwach jak pliki <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">pdf</code>.</p>\n<p>Łatwo sprawdzimy czy faktycznie istnieją dzięki poleceniu <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">ls</code></p>\n<p><img src=\"/images/posts/2020-04-06/text2.png\"></p>\n<h2 id=\"strukturyzacja-danych\"><a href=\"#strukturyzacja-danych\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Strukturyzacja danych</h2>\n<p>Na początek zaczniemy od czegoś prostego. Załóżmy, że chcemy policzyć ile pieniędzy łącznie wydałem na bilety, ale nie będziemy sprawdzali tego na każdym bilecie po kolei ręcznie - od tego jest komputer. Poza tym gdy dostaniemy inny zestaw biletów ręczną robotę musieli byśmy powtarzać. Może Cię to zaskoczyć, ale aby wykonać to zadanie nie trzeba nawet edytora kodu i napisaliśmy to w jednej linii:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> paste -sd+ </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> bc</span></code></pre>\n<p>Ta linia zwróciła <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">786.11</code> czyli koszt wszystkich biletów.</p>\n<p><img src=\"/images/posts/2020-04-06/sum.png\"></p>\n<p>Wejdziemy teraz głębiej i zobaczmy co się za tym kryje. Wyświetlimy jeden z plików tekstowych poleceniem <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">cat eic_67584344.txt</code>:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">BILET INTERNETOWYTANIOMIASTOWY</span>\n\n<span style=\"color: #22863A\">\"PKP Intercity\"</span>\n<span style=\"color: #24292EFF\">Spółka Akcyjna</span>\n\n<span style=\"color: #24292EFF\">OF: 503</span>\n\n<span style=\"color: #24292EFF\">NORMAL. </span><span style=\"color: #1976D2\">:</span><span style=\"color: #24292EFF\"> 1</span>\n<span style=\"color: #24292EFF\">ULG. </span><span style=\"color: #1976D2\">:</span>\n<span style=\"color: #24292EFF\">X </span><span style=\"color: #1976D2\">:</span><span style=\"color: #24292EFF\"> X</span>\n\n<span style=\"color: #24292EFF\">Przewoźnik: PKP IC</span>\n<span style=\"color: #24292EFF\">A-Cena bazowa: 1xNormal</span>\n\n<span style=\"color: #24292EFF\">¦ ¸</span>\n\n<span style=\"color: #24292EFF\">Od/From</span>\n\n<span style=\"color: #24292EFF\">27.09 05:50 Iława Gł.</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #24292EFF\">PRZEZ: Działdowo </span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\"> Nasielsk</span>\n\n<span style=\"color: #24292EFF\">Do/To</span>\n\n<span style=\"color: #24292EFF\">¦ ¸</span>\n\n<span style=\"color: #24292EFF\">KL./CL.</span>\n\n<span style=\"color: #24292EFF\">Warszawa C.</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">27.09 07:50</span>\n<span style=\"color: #D32F2F\">*</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">2</span>\n<span style=\"color: #D32F2F\">*</span>\n\n<span style=\"color: #24292EFF\">SUMA PLN: 39,90 zł</span>\n<span style=\"color: #24292EFF\">519836278964</span>\n\n<span style=\"color: #24292EFF\">Nr transakcji:</span>\n\n<span style=\"color: #24292EFF\">Informacje o podróży:</span>\n<span style=\"color: #24292EFF\">Stacja</span>\n<span style=\"color: #24292EFF\">Data Godzina</span>\n<span style=\"color: #24292EFF\">Iława Gł.</span>\n<span style=\"color: #24292EFF\">27.09 05:50</span>\n<span style=\"color: #24292EFF\">Warszawa C.</span>\n<span style=\"color: #24292EFF\">27.09 07:50</span>\n\n<span style=\"color: #24292EFF\">/Wagon K m</span>\n<span style=\"color: #24292EFF\">IC 5324</span>\n<span style=\"color: #24292EFF\">208</span>\n<span style=\"color: #24292EFF\">5</span>\n\n<span style=\"color: #24292EFF\">eIC67584344</span>\n\n<span style=\"color: #24292EFF\">Nr miejsca (o-okno ś-środek k-korytarz) Suma PLN</span>\n<span style=\"color: #24292EFF\">81 o</span>\n<span style=\"color: #24292EFF\">39,90 zł</span>\n<span style=\"color: #24292EFF\">1 m. </span><span style=\"color: #D32F2F\">do</span><span style=\"color: #24292EFF\"> siedzenia</span><span style=\"color: #D32F2F\">;</span><span style=\"color: #24292EFF\"> wagon bez przedziałów</span>\n\n<span style=\"color: #24292EFF\">d9U</span>\n<span style=\"color: #24292EFF\">Podróżny:</span>\n<span style=\"color: #24292EFF\">PTU</span>\n<span style=\"color: #24292EFF\">8%</span>\n\n<span style=\"color: #24292EFF\">Suma PLN Płatność: przelewem</span>\n<span style=\"color: #24292EFF\">39,90 Zapłacono i wystawiono dnia:</span>\n<span style=\"color: #24292EFF\">2018-09-26 09:01:20(52245592)</span>\n\n<span style=\"color: #24292EFF\">Ogółem PLN:</span>\n\n<span style=\"color: #24292EFF\">39,90</span>\n\n<span style=\"color: #24292EFF\">Niniejszy bilet internetowy nie jest fakturą VAT.</span>\n<span style=\"color: #24292EFF\">W związku z przeprowadzanymi modernizacjami sieci kolejowej, uprzejmie prosimy o</span>\n<span style=\"color: #24292EFF\">dokładne sprawdzanie rozkładu jazdy pociągów przed podróżą.</span>\n\n<span style=\"color: #24292EFF\">Data wydruku: 2018-09-26 09:01:57</span>\n\n<span style=\"color: #24292EFF\">5324</span>\n\n<span style=\"color: #24292EFF\">Bilet internetowy jest biletem imiennym i jest ważny:</span>\n<span style=\"color: #24292EFF\">a) wraz z dokumentem ze zdjęciem potwierdzającym tożsamość Podróżnego,</span>\n<span style=\"color: #24292EFF\">b) tylko w dniu, relacji, pociągu, wagonie i na miejsce na nim oznaczone.</span>\n\n<span style=\"color: #24292EFF\">Zwrotu należności za niewykorzystany bilet dokonuje się na podstawie wniosku</span>\n<span style=\"color: #24292EFF\">złożonego przez płatnika w wyznaczonych przez </span><span style=\"color: #22863A\">'PKP Intercity'</span><span style=\"color: #24292EFF\"> S.A. punktach, z</span>\n<span style=\"color: #24292EFF\">wyjątkiem należności zwracanych automatycznie na zasadach określonych w</span>\n<span style=\"color: #24292EFF\">Regulaminie e-IC.</span>\n\n<span style=\"color: #24292EFF\">Daniel Gustaw</span>\n\n<span style=\"color: #24292EFF\">d9U</span>\n\n<span style=\"color: #24292EFF\">Informacja o cenie</span>\n<span style=\"color: #24292EFF\">Opłata za przejazd:</span>\n\n<span style=\"color: #24292EFF\">(P24) 7219</span></code></pre>\n<p>Pierwsze co się nasuwa to, że plik zawiera wszystkie informacje w formie nienaruszonej. Nie ma żadnych literówek, błędów, przestawień jakie typowe są dla systemów OCR wykonujących analogiczną pracę na skanach dokumentów. Cena <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">39,90 zł</code> powtarza się tu w kilku liniach. Czasami występuje razem z <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">zł</code>, czasami nie, może się zdarzyć, że układ linii będzie inny jeśli na bilecie będzie jechało kilka osób. Szukamy najbardziej wiarygodnego wzorca. Jest nim <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SUMA PLN: 39,90 zł</code>. Teraz chcemy wyłowić z tego pliku właśnie <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">39,90</code>. Posłuży nam do tego <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">perl</code> - język stworzony przez lingwistę Larrego Walla właśnie w celu pracy z plikami tekstowymi.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ cat eic_67584344.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span>\n<span style=\"color: #24292EFF\">39,90</span></code></pre>\n<p>Polecenie to można wytłumaczyć następująco: </p>\n<ul>\n<li>weź plik <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">eic_67584344.txt</code></li>\n<li>całą jego zawartość przekieruj do programu który napisaliśmy w <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">perl</code> jako wejście</li>\n<li>program na każdej linii tekstu wykonuje to samo polecenie</li>\n<li>sprawdza czy tekst pasuje do wzorca zaczynającego się od <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">SUMA PLN:</code> i kończącego na <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">zł</code>. </li>\n<li>jeśli tak, to wycina wartość między tymi ciągami znakowymi i ją zwraca</li>\n</ul>\n<p>Problem jaki mamy to polski <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">,</code> zamiast ogólnie stosowanej na świecie <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">.</code>. Ten problem bardzo łatwo eliminujemy poleceniem <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">tr</code> które zamienia swój pierwszy argument na drugi.</p>\n<p><img src=\"/images/posts/2020-04-06/tr.png\"></p>\n<p>Nie będziemy oczywiście powtarzać tych poleceń dla każdego pliku osobno. Zamiast tego ponownie wykorzystamy znany już <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code> </p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span>\n<span style=\"color: #24292EFF\">39.90</span>\n<span style=\"color: #24292EFF\">63.00</span>\n<span style=\"color: #24292EFF\">15.14</span>\n<span style=\"color: #24292EFF\">55.00</span>\n<span style=\"color: #24292EFF\">60.00</span>\n<span style=\"color: #24292EFF\">186.00</span>\n<span style=\"color: #24292EFF\">70.56</span>\n<span style=\"color: #24292EFF\">89.40</span>\n<span style=\"color: #24292EFF\">139.00</span>\n<span style=\"color: #24292EFF\">68.11</span></code></pre>\n<p>Pozwolił nam na przeszukanie plików tekstowych za pomocą zdefiniowanych filtrów plik po pliku. Z ciekawszych rzeczy to wykorzystane <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">&quot;{}&quot;</code> oznacza argument który wszedł do <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">xargs</code>.</p>\n<p>Zostało już tylko sumowanie, ale suma kolumn z pliku tekstowego to bułka z masłem w konsoli <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bash</code>. W przypadku jednej kolumny nie trzeba nawet uruchamiać <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">awk</code> - zaawansowanego programu do przetwarzania tekstów. Wystarczy nam <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">paste</code> - program do łączenia plików i <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bc</code> prosty program do liczenia sum.</p>\n<p>Za pomocą <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">paste</code> z opcją <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">-s</code> wykonamy transpozycję do jednej linii. Opcją <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">d</code> ustawimy separator. Będzie nim oczywiście znak dodawania <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">+</code>. Wynik wygląda miej więcej tak:</p>\n<p><img src=\"/images/posts/2020-04-06/paste.png\"></p>\n<p>Ostatnia cegiełka <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">bc</code> kończy zadanie, ale to było prezentowane na samym początku:</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">$ ls eic_</span><span style=\"color: #D32F2F\">*</span><span style=\"color: #24292EFF\">.txt </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> xargs -i cat </span><span style=\"color: #22863A\">\"{}\"</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> perl -ne </span><span style=\"color: #22863A\">'if(/SUMA PLN: (.*) zł/){print \"$1\\n\";}'</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> tr , </span><span style=\"color: #1976D2\">.</span><span style=\"color: #24292EFF\"> </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> paste -sd+ </span><span style=\"color: #D32F2F\">|</span><span style=\"color: #24292EFF\"> bc</span>\n<span style=\"color: #24292EFF\">786.11</span></code></pre>\n<h2 id=\"wizualizacja-wyników\"><a href=\"#wizualizacja-wynik%C3%B3w\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Wizualizacja wyników</h2>\n<p>Ponieważ pliki ułożone są chronologicznie wyświetlimy łatwo będzie nam zobaczyć wykres kolejnych cen. W tym celu pobieramy <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">chart</code> - paczkę napisaną w <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">go</code> służącą do tworzenia wykresów.</p>\n<pre class=\"shiki\" style=\"background-color: #ffffff\"><code><span style=\"color: #24292EFF\">wget https://github.com/marianogappa/chart/releases/download/v3.0.0/chart_3.0.0_linux_amd64.tar.gz -O /tmp/chart.tar.gz</span></code></pre>\n<p>I rozpakowujemy </p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">tar -xvf /tmp/chart.tar.gz --directory /usr/local/bin</code>\n<p>Kolejna komenda, dodaje numery kolumn <code class=\"shiki-inline\" style=\"background: #2e3440; color: #d8dee9\">cat -n</code> i rysuje wykres</p>\n<code class=\"shiki\" style=\"background: #2e3440; color: #d8dee9\">ls eic_*.txt | xargs -i cat &quot;{}&quot; | perl -ne &#039;if(/SUMA PLN: (.*) zł/){print &quot;$1\\n&quot;;}&#039; | tr , . | cat -n | chart line</code>\n<p><img src=\"/images/posts/2020-04-06/graph.png\"></p>\n<p>Podsumowując. Nie napracowaliśmy się tutaj za bardzo ale właśnie to było celem. Pokazanie jak jedną linią kodu można posumować ceny lub wyrysować wykres z danych, które pozornie są niedostępne, bo ich format nie jest tak oczywisty jak w przypadku uporządkowanych danych zapisanych w bazie o dobrze określonej strukturze.</p>\n<p>Jeśli jesteś przedsiębiorcą i zainteresował Cię temat automatyzacji przetwarzania dokumentów umów się ze mną na darmową konsultację korzystając z linku ...</p>\n<p>Jeśli jesteś programistą i chcesz z nami pracować ...</p>\n<p>Jeśli chcesz poszerzyć swoją wiedzę i zapoznać się z narzędziami z których korzystaliśmy linki do nich znajdziesz poniżej...</p>\n<p>Czyszczenie danych</p>\n<p><a href=\"https://en.wikipedia.org/wiki/Data_cleansing\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://en.wikipedia.org/wiki/Data_cleansing</a></p>\n<p>Pdf to Text Converter</p>\n<p><a href=\"https://www.cyberciti.biz/faq/converter-pdf-files-to-text-format-command/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.cyberciti.biz/faq/converter-pdf-files-to-text-format-command/</a></p>\n<p>Przykład zastosowania xargs</p>\n<p><a href=\"https://stackoverflow.com/questions/33141207/what-is-the-working-of-this-command-ls-xargs-i-t-cp-1\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://stackoverflow.com/questions/33141207/what-is-the-working-of-this-command-ls-xargs-i-t-cp-1</a></p>\n<p>Chart - narzędzie do rysowania wykresów</p>\n<p><a href=\"https://marianogappa.github.io/chart/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://marianogappa.github.io/chart/</a></p>\n<p>Paste - komenda do łączenia plików</p>\n<p><a href=\"https://www.geeksforgeeks.org/paste-command-in-linux-with-examples/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.geeksforgeeks.org/paste-command-in-linux-with-examples/</a></p>\n<p>Przykładowe onelinery w Perlu</p>\n<p><a href=\"https://www.rexegg.com/regex-perl-one-liners.html\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://www.rexegg.com/regex-perl-one-liners.html</a></p>\n","excerpt":"","description":"","timeToRead":6,"author":{"id":"Daniel Gustaw","title":"Daniel Gustaw","path":"/author/Daniel%20Gustaw/"}}}]}}},"context":{}}